# Stage 1: Builder
FROM golang:1.24 AS builder
WORKDIR /app

# Set GOPRIVATE for potentially private base module or dependencies
ENV GOPRIVATE=github.com/hako/*

# Install git (might be needed for go mod download)
RUN apt-get update && apt-get install -y git --no-install-recommends && rm -rf /var/lib/apt/lists/*

# Copy go module files (WITHOUT workspace file)
COPY go.mod go.sum ./

# Copy the entire source code BEFORE downloading or tidying
# This ensures local modules defined in go.work or via replace are present
COPY . .

# Download external dependencies into the module cache
# This should now respect GOPRIVATE and local paths
RUN go mod download

# Tidy the modules AFTER the source code is present and dependencies are downloaded
RUN go mod tidy

# Build the application directly (no vendoring)
# go build should find local packages relative to go.mod
RUN CGO_ENABLED=0 go build -ldflags "-s -w" -o /double-take-backend ./cmd/server

# Stage 2: Final minimal image based on Alpine with timezone data
FROM alpine:latest
WORKDIR /app

# Install timezone data
RUN apk add --no-cache tzdata

# Copy the compiled application from the builder stage
COPY --from=builder /double-take-backend /double-take-backend

# Copy the web templates and static assets
COPY --from=builder /app/web ./web

# Copy the new UI static files
COPY --from=builder /app/ui/public ./ui/public

# Expose the application port (read from config ideally, but hardcode for now)
# EXPOSE 8080

# Set Timezone (example) - This is now handled by docker-compose.yml but tzdata is needed
# ENV TZ=Europe/Berlin

ENTRYPOINT ["/double-take-backend"]
