# Docker Compose Konfiguration für NVIDIA GPU

services:
  # NVIDIA GPU Version (benötigt NVIDIA Docker Support)
  double-take:
    build:
      context: ../..
      dockerfile: docker/nvidia/Dockerfile
      # Plattform explizit setzen für bessere Kompatibilität
      # amd64 = Standard Intel/AMD 64-bit Prozessoren
      args:
        - BUILDPLATFORM=linux/amd64
        - TARGETPLATFORM=linux/amd64
    container_name: double-take
    restart: always
    # Standard-Port für Double-Take UI
    ports:
      - "3000:3000"
    volumes:
      - ../../config:/config  # Konfigurationsdateien
      - ../../data:/data      # Persistente Daten direkt im Projektverzeichnis
    environment:
      - TZ=Europe/Berlin  # Zeitzone anpassen falls nötig
    platform: linux/amd64  # Explizite Plattformdefinition
    # NVIDIA GPU Zugriff konfigurieren
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia  # Erfordert nvidia-docker oder Docker mit GPU-Support
              count: 1       # Anzahl der GPUs
              capabilities: [gpu]
      
  # InsightFace mit NVIDIA GPU-Beschleunigung
  insightface:
    build:
      context: ../insightface
      dockerfile: Dockerfile
    container_name: insightface
    restart: always
    ports:
      - "18081:18081"
    volumes:
      - ../../data/insightface:/app/models  # Modelle persistent speichern
    environment:
      - TZ=Europe/Berlin
      - PYTHONUNBUFFERED=1
      - INFERENCE_BACKEND=auto  # Automatische Provider-Erkennung mit Fallback
    platform: linux/amd64
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    # Beim ersten Start werden Modelle heruntergeladen, was einige Zeit dauern kann

  # HINWEIS: CompreFace und MQTT werden als externe Dienste verwendet
  # und sind nicht Teil dieser docker-compose Konfiguration.
  # Bitte stellen Sie sicher, dass diese Dienste auf ihren externen
  # Servern verfügbar sind und in config.yaml richtig konfiguriert sind.

# Keine benannten Docker-Volumes mehr erforderlich, da direkte Verzeichnis-Mappings verwendet werden!
  # ========================================================================
  
  # compreface-postgres:
  #   image: postgres:13.4
  #   container_name: compreface-postgres
  #   restart: always
  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_DB=frs
  #   volumes:
  #     - compreface-db:/var/lib/postgresql/data

  # compreface-api:
  #   image: exadel/compreface-api:latest
  #   container_name: compreface-api
  #   restart: always
  #   depends_on:
  #     - compreface-postgres
  #   environment:
  #     - SPRING_DATASOURCE_URL=jdbc:postgresql://compreface-postgres:5432/frs
  #     - SPRING_DATASOURCE_USERNAME=postgres
  #     - SPRING_DATASOURCE_PASSWORD=postgres
  #     - SPRING_PROFILES_ACTIVE=dev
  #   volumes:
  #     - compreface-data:/root/.frs

  # compreface-ui:
  #   image: exadel/compreface-fe:latest
  #   container_name: compreface-ui
  #   restart: always
  #   ports:
  #     - "8000:80"
  #   depends_on:
  #     - compreface-api
  
  # Wenn du CompreFace aktivierst, füge diese Abhängigkeit zum double-take Service hinzu:
  # depends_on:
  #   - compreface-api

# Wenn du CompreFace aktivierst, füge einen volumes-Abschnitt hinzu:
# volumes:
#   compreface-db:
#   compreface-data:
